/* CREATE POLICY IN AWS S3
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::<bucket>/<prefix>/*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::<bucket>",
            "Condition": {
                "StringLike": {
                    "s3:prefix": [
                        "<prefix>/*"
                    ]
                }
            }
        }
    ]
}
*/

/* CREATE ROLE IN AWS S3
1. THIS AWS ACCOUNT
2. CHECK "Require external ID
3. External ID = "0000"
*/

// SET ROLE CONTEXT
use role accountadmin;

// CREATE WAREHOUSE
create warehouse if not exists ingest_wh;

// CREATE STORAGE INTEGRATION
create storage integration if not exists s3_int
    type = external_stage
    storage_provider = S3
    enabled = true
    storage_aws_role_arn = 'arn:aws:iam::<############>:role/<role_name>'
    storage_allowed_locations = ('s3://<bucket>/<path/');
    
 // DESCRIBE STORAGE INTEGRATION
 desc integration s3_int;
 
 // COPY STORAGE_AWS_IAM_USER_ARN
 // COPY STORAGE_AWS_EXTERNAL_ID

 
 /* EDIT TRUST RELATIONSHIP FOR ROLE IN AWS S3
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "AWS": "<snowflake_user_arn>"
      },
      "Action": "sts:AssumeRole",
      "Condition": {
        "StringEquals": {
          "sts:ExternalId": "<snowflake_external_id>"
        }
      }
    }
  ]
}
*/
 

// CREATE DATABASE
create database if not exists ingest_db;

// CREATE SCHEMA
create schema if not exists ingest_db.s3_bucket;

// SET OBJECT CONTEXT
use schema ingest_db.s3_bucket;

// CREATE CSV FILE FORMAT
create file format if not exists csv_format
    type = csv
    field_delimiter = ','
    skip_header = 1;

// CREATE CSV STAGE
create stage if not exists csv_stage
    url = 's3://<bucket>/<path/'
    storage_integration = s3_int
    file_format = ( format_name = 'csv_format' );

// LIST CSV FILES FROM STAGE
list @csv_stage;

// CREATE CSV TABLE(S)
create or replace table <table_name_1>(
    file_name       string
    ,file_row       number
    ,<file_name_1>  <field_type_1>
    ,<file_name_2>  <field_type_2>
    ,<file_name_3>  <field_type_3>
    ,<file_name_n>  <field_type_n>
    ,....);

// LOAD CSV FILE
copy into <table_name_1>
from( select metadata$filename, metadata$file_row_number
        ,$1,$2,$3,$n.....
    from @csv_stage )
pattern='*.csv*';


// CREATE JSON FILE FORMAT
create file format if not exists json_format
    type = json;

// CREATE JSON STAGE
create stage if not exists json_stage
    url = 's3://<bucket>/<path/')
    storage_integration = s3_int
    file_format = ( format_name = 'json_format' );

// LIST JSON FILES FROM STAGE
list @json_stage;

// CREATE JSON TABLES
create or replace table raw_json(
    file_name   string
    ,file_row   number
    ,raw_data   variant);

// LOAD JSON FILES
copy into raw_json
from( select metadata$filename, metadata$file_row_number, $1
    from @json_stage )
pattern='*.json*';
